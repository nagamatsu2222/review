<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8">
  <title>商品レビュー機能作成</title>
  <link type="text/css" rel="stylesheet" href="css/style.css">
</head>

<body>
  <div class="contents-wrap">
    <h1>商品レビュー</h1>
    <div class="selectbox-wrap">
      <label class="selectbox">
        <select class="sort" name="member">
            <!-- <option value="high">評価が高い順</option>
            <option value="low">評価が低い順</option> -->
            <option value="" disabled selected>選択してください</option>
            <option value="base" <% if (order === "base") { %> selected <% } %>> 標準</option>
            <option value="rating:desc" <% if (order === "desc") { %> selected <% } %>> 評価が高い順</option>
            <option value="rating:asc"  <% if (order === "asc") { %> selected <% } %>> 評価が低い順</option>
            <option value="eva5">評価☆5</option>
            <option value="eva4">評価☆4</option>
            <option value="eva3">評価☆3</option>
            <option value="eva2">評価☆2</option>
            <option value="eva1">評価☆1</option>
        </select>
      </label>
    </div>
    <div class="form-wrap">
      <form action="/post"  method="POST">
        <p class="subtitle">ユーザー名</p><input type="text" name="username" class="textbox">
        <p class="subtitle">年齢</p><input type="text" name="age" class="textbox">
        <p class="subtitle">評価</p><input type="text" name="rating" class="textbox">
        <p class="subtitle">評価内容</p><input type="text" name="reason" class="textbox">
        <input type="submit" class="formbtn" value="送信する">
      </form>
    </div>
    <div class="table-wrap">
      <table class="table usersBox">
        <thead>
          <tr>
            <th>名前</th>
            <th>年齢</th>
            <th>評価☆</th>
            <th>理由</th>
            <th>更新</th>
          </tr>
        </thead>
        <% function isWelfare(num) { if(num===1) { return '有' ; } else { return '無' ; } } %>
        <tbody class="usersBoxInfo">
        <% users.forEach(function (value) { %>
          <tr>
            <td>
              <%= value.username %>
            </td>
            <td>
              <%= value.age %>
            </td>
            <td>
              <%= value.rating %>
            </td>
            <td>
              <%= value.reason %>
            </td>
            <td><a href="/edit/<%= value.id %>"><input type="button" value="更新"></a></td>
          </tr>
        <% }); %>
        </tbody>
      </table>
    </div>
  </div>

</body>

<script>

  // 課題02 - 評価値のソート機能

  const users = JSON.parse('<%= JSON.stringify(users) %>'.replace(/&#34;/g, '"'));
  const sort = document.querySelector('.sort');
  const usersBoxInfo = document.getElementsByClassName("usersBoxInfo");
  const selectBoxWrap = document.getElementsByClassName("selectbox-wrap");


  // プルダウンを変える
  sort.addEventListener("change", function() {
    // ユーザー情報一覧表削除
    while(usersBoxInfo[0].firstChild){
      usersBoxInfo[0].firstChild.remove();
    }
    // 課題02 - 評価値のソート機能
    // for (let i = 0; i < users.length; i++){
    //   if(sort.value === "high"){
    //     // 評価の高い順
    //     users.sort((a, b) => b.rating - a.rating);
    //     usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${users[i].username}</td><td>${users[i].age}</td><td>${users[i].rating}</td><td>${users[i].reason}</td></tr>`)
    //   }else if(sort.value === "low"){
    //     // 評価の低い順
    //     users.sort((a, b) => a.rating - b.rating);
    //     usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${users[i].username}</td><td>${users[i].age}</td><td>${users[i].rating}</td><td>${users[i].reason}</td></tr>`)
    //   }
    // }
    // 課題03 - 評価値の絞り込み機能 //
    // 評価☆5
    if(sort.value === "eva5"){
      const filteredData = users.filter(value => value.rating === 5);
      filteredData.forEach(function(element){
        usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${element.username}</td><td>${element.age}</td><td>${element.rating}</td><td>${element.reason}</td></tr>`)
      });
    // 評価☆4
    }else if(sort.value === "eva4"){
      const filteredData = users.filter(value => value.rating === 4);
      filteredData.forEach(function(element){
        usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${element.username}</td><td>${element.age}</td><td>${element.rating}</td><td>${element.reason}</td></tr>`)
      });
    // 評価☆3
    }else if(sort.value === "eva3"){
      const filteredData = users.filter(value => value.rating === 3);
      filteredData.forEach(function(element){
        usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${element.username}</td><td>${element.age}</td><td>${element.rating}</td><td>${element.reason}</td></tr>`)
      });
    // 評価☆2
    }else if(sort.value === "eva2"){
      const filteredData = users.filter(value => value.rating === 2);
      filteredData.forEach(function(element){
        usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${element.username}</td><td>${element.age}</td><td>${element.rating}</td><td>${element.reason}</td></tr>`)
      });
    // 評価☆1
    }else if(sort.value === "eva1"){
      const filteredData = users.filter(value => value.rating === 1);
      filteredData.forEach(function(element){
        usersBoxInfo[0].insertAdjacentHTML("beforeend",`<tr><td>${element.username}</td><td>${element.age}</td><td>${element.rating}</td><td>${element.reason}</td></tr>`)
      });
    }
  }, false);

  // 課題04 - 年代毎のグラフ作成
  const twoList = [];
  const threeList = [];
  const fourList = [];
  for (let i = 0; i < users.length; i++){
    if(users[i].age >= 20 && users[i].age <= 29){
      twoList.push(users[i]);
    }else if(users[i].age  >= 30 && users[i].age <= 39){
      threeList.push(users[i]);
    }else if(users[i].age  >= 40 && users[i].age <= 49){
      fourList.push(users[i]);
    }
  }
  selectBoxWrap[0].insertAdjacentHTML("afterend",`<table class="agelist"><tr><td>20代${twoList.length}人</td><td>30代${threeList.length}人</td><td>40代${fourList.length}人</td></tr></table>`);


  // EX課題01 - 評価値のソート機能
    sort.addEventListener("change", () => {
        let order = ""
        for(option of sort.options) {
            if (option.sort) {
                order = option.value
            }else if(order === "base"){
                order = option.value
            }else if(order === "desc"){
                order = option.value
            }else if(order === "asc"){
                order = option.value
            }
            console.log(option.value)
        }
      // ソートしたユーザー情報でindexをレンダリングする
    location.assign(`/${order}`)
    })

</script>
</html>